variables:
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode --errors"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

.sdk-base:
  before_script:
    - export PANGEA_INTEGRATION_TOKEN_LVE="$(eval echo \$PANGEA_INTEGRATION_TOKEN_LVE_AWS)"
    - export PANGEA_INTEGRATION_DOMAIN_LVE="$(eval echo \$PANGEA_INTEGRATION_DOMAIN_LVE_AWS)"
    - cd packages/pangea-sdk
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

sdk-integration-tests:
  stage: integration_tests
  variables:
  # Set each service test environment
    SERVICE_AUDIT_ENV: LVE
    SERVICE_AUTHN_ENV: LVE
    SERVICE_EMBARGO_ENV: LVE
    SERVICE_FILE_SCAN_ENV: LVE
    SERVICE_IP_INTEL_ENV: LVE
    SERVICE_DOMAIN_INTEL_ENV: LVE
    SERVICE_URL_INTEL_ENV: LVE
    SERVICE_FILE_INTEL_ENV: LVE
    SERVICE_USER_INTEL_ENV: LVE
    SERVICE_REDACT_ENV: LVE
    SERVICE_VAULT_ENV: LVE
    SERVICE_SHARE_ENV: LVE

  before_script:
    - echo $ENV
    - echo $CLOUD
    - echo $TEST
    # Update environment variables
    # Domain
    - export PANGEA_INTEGRATION_DOMAIN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_DOMAIN_${ENV}_${CLOUD})"
    # Tokens
    - export PANGEA_INTEGRATION_TOKEN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_TOKEN_${ENV}_${CLOUD})"
    - export PANGEA_INTEGRATION_VAULT_TOKEN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_VAULT_TOKEN_${ENV}_${CLOUD})"
    - export PANGEA_INTEGRATION_CUSTOM_SCHEMA_TOKEN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_CUSTOM_SCHEMA_TOKEN_${ENV}_${CLOUD})"
    - export PANGEA_INTEGRATION_MULTI_CONFIG_TOKEN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_MULTI_CONFIG_TOKEN_${ENV}_${CLOUD})"
    # Config IDs
    - export PANGEA_AUDIT_CONFIG_ID_1_${ENV}="$(eval echo \$PANGEA_AUDIT_CONFIG_ID_1_${ENV}_${CLOUD})"
    - export PANGEA_AUDIT_CONFIG_ID_2_${ENV}="$(eval echo \$PANGEA_AUDIT_CONFIG_ID_2_${ENV}_${CLOUD})"
    - export PANGEA_REDACT_CONFIG_ID_1_${ENV}="$(eval echo \$PANGEA_REDACT_CONFIG_ID_1_${ENV}_${CLOUD})"
    - export PANGEA_REDACT_CONFIG_ID_2_${ENV}="$(eval echo \$PANGEA_REDACT_CONFIG_ID_2_${ENV}_${CLOUD})"

    - cd packages/pangea-sdk/

  parallel:
    matrix:
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_AUDIT_ENV}
        TEST: ITAuditTest
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_AUTHN_ENV}
        TEST: ITAuthNTest
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_EMBARGO_ENV}
        TEST: ITEmbargoTest
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_DOMAIN_INTEL_ENV}
        TEST: ITDomainIntelTest
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_IP_INTEL_ENV}
        TEST: ITIPIntelTest
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_URL_INTEL_ENV}
        TEST: ITURLIntelTest
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_USER_INTEL_ENV}
        TEST: ITUserIntelTest
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_FILE_INTEL_ENV}
        TEST: ITFileIntelTest
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_FILE_SCAN_ENV}
        TEST: ITFileScanTest
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_REDACT_ENV}
        TEST: ITRedactTest
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_VAULT_ENV}
        TEST: ITVaultTest
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_SHARE_ENV}
        TEST: ITShareTest
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH
  script:
    - mvn $MAVEN_CLI_OPTS test -Dtest=${TEST}

building-sdk:
  extends: .sdk-base
  stage: build
  script:
    - mvn $MAVEN_CLI_OPTS compile

publishing-sdk:
  extends: .sdk-base
  stage: publish
  script:
    - bash ../../dev/validate_tag.sh $CI_COMMIT_TAG
    - mvn $MAVEN_CLI_OPTS deploy -Dmaven.test.skip=true
  rules:
    - if: $CI_COMMIT_TAG
